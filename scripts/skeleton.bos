#define TAK //this is a TAK script

#include "constants.h"

piece  torso, torso_a, pelvis, rthigh, rthigh_a, lthigh, lthigh_a, lleg, lleg_a, rleg, rleg_a, luparm, luparm_a, lloarm, lloarm_a, ground, ruparm, ruparm_a, rloarm, rloarm_a, head, head_a, gun, gun_a;
		

//signals to handle control of..everything
#define SIG_RUN					8
#define SIG_AIMRUN				16
#define SIG_CRAWL				32
#define SIG_AIM1				64
#define SIG_AIM2				128 //no inf has more than 2 weapons except commando, something of a special exception
#define SIG_PINNEDCTRL			256
#define SIG_FEARRECOVERY		512
#define SIG_RESTOREFROMCRAWL	1024
#define SIG_IDLE				2048
#define SIG_BUILD				4096

/*
Defs that are shared among inf
the numbers that control pinned levels, how scary various weapons are, ect.
*/
#include "inf_sharedDefs.h"

//individual unit definitions
#define RIFLE
#define NoAimRun
#define IdleDelay				10000
#define RestoreDelay			5000
#define StanceNumber			1 //number of WeaponReady stances

/* --Var defs:
-----Boolean
---
bAiming - is the unit currently aiming at anything? or was it recently aiming at anything (time controlled by restoreafterdelay)
	Controls: timing of idle animations, the usage of AimRunControl over RunControl
	Set by: Aimweapon, unset over time by AimRunControl and StartMoving/StopMoving
---
bNading - is the unit currently in the process of throwing a grenade?
	Controls: locks out weaponready, and X
	Set by: fireweapon of the nade script, unset by same at the end
---
bMoving - is the unit currently moving? 
	Controls: various animations.
	Set by: StartMoving, unset by StopMoving
---
-----Integer
---
iState - what the unit is currently doing //todo: add states for being in a transport, update killed and aimweapon accordingly
	Controls: which aiming anim to use, among others.
	 Set by: everything that changes the state of the unit. *Control, HitbyWeapon, RestoreFromCrawl, ect
	  Values:
		standing idle - 0
		standing at attention - 1
		standing aiming rifle/SMG - 2
		kneeling aiming rifle/SMG - 3
		-		
		running - 4
		running aiming - 5
		-
		prone 'idle' - 6
		prone aiming - 7
		crawling - 8
		-
		pinned - 9 
---
iFear - how 'afraid' unit currently is. 
	Controls: if unit is crawling/prone or standing.
	Controls: pinned status.
	 Set by: increased by HitbyWeapon on impact of suitable weapon, decreased by FearRecovery
	  Values: 0-20
	  iFear = 0-14 = prone/crawling
	  iFear >= 15 = pinned, unable to fire or crawl.
---
	
*/
static-var bAiming, bMoving, iState, iFear, iSpeed;



//FX definitions
	//frivolous
#define BLOOD_SM 1024+1
#define BLOOD_LG 1024+2
#define CLIP 1024+3
#define SHELL 1024+4
#define PISS 1024+5
#define CIG 1024+6
//end FX

#define HEAD	32768 
#define TORSO	81920
#define RUPARM	22937
#define RLLOARM	29491
#define LUPARM	19660
#define LLOARM	26214
#define RTHIGH	49152
#define RLEG	42598
#define LTHIGH	45875
#define LLEG	39321

#define BODY_RADIUS [100]// Hmm, like name says, and in 3do & script distance units


//aiming poses
#include "inf_poses.h"

//weapon ready - split out so I can easily update the number of poses
#include "inf_weaponReady.h"

//Idle animations.
#include "inf_idleAnims.h"

//All of the animations concerning movement - running, aimrunning, crawling, standing, going prone.
#include "inf_movementAnims.h"
		

//All the loops that handle the animations and state changes concerning movement.
#include "inf_movementControls.h"

//Fead handling (HitByWeapon, FearRecovery, TakeCover, PinnedControl, Pinned, RestoreAfterCover)
#include "inf_fearHandling.h"

//transport state handling
#include "inf_transportHandling.h"


StartMoving()
{
	signal SIG_IDLE;
	bAiming = 0;
	bMoving = 1;
}

StopMoving()
{
	signal SIG_IDLE;
	bAiming = 0;
	bMoving = 0;
}

// Transport script courtesy of Gnome's script for Spring SW reb ground trans
TransportPickup(u) {
if( get UNIT_ALLIED(u) == 1) { // only pick up allied units
	if(get XZ_HYPOT(get UNIT_XZ(u) - get PIECE_XZ(ground)) <= [200]) {
									if(get UNIT_HEIGHT (u) == HEAD)
							{
							attach-unit u to head_a;
							}
							if(get UNIT_HEIGHT (u) == TORSO)
							{
							attach-unit u to torso_a;
							}
							if(get UNIT_HEIGHT (u) == RUPARM)
							{
							attach-unit u to ruparm_a;
							}
							if(get UNIT_HEIGHT (u) == RLOARM)
							{
							attach-unit u to rloarm_a;
							}
							if(get UNIT_HEIGHT (u) == LUPARM)
							{
							attach-unit u to luparm_a;
							}
							if(get UNIT_HEIGHT (u) == LLOARM)
							{
							attach-unit u to lloarm_a;
							}
							if(get UNIT_HEIGHT (u) == RTHIGH)
							{
							attach-unit u to rthigh_a;
							}
							if(get UNIT_HEIGHT (u) == RLEG)
							{
							attach-unit u to rleg_a;
							}
							if(get UNIT_HEIGHT (u) == LTHIGH)
							{
							attach-unit u to lthigh_a;
							}			
							if(get UNIT_HEIGHT (u) == LLEG)
							{
							attach-unit u to lleg_a;
							}
	}
}
}

TransportDrop(unitid, position) {
	var depth, pos;
	depth = get GROUND_HEIGHT(get PIECE_XZ(ground));
	if(depth < 3) {
		return 0;
	}
	pos = get XZ_HYPOT(get PIECE_XZ(ground) - position) + [5];
	set BUSY to 1;
	drop-unit unitid;
	sleep 1;
	set BUSY to 0;
}

Assemble()
{
	var MyID;
	MyID = GET MY_ID;
	var u;
		for(u=(get MAX_ID);u>=1;--u;)
		{
			if (u != MyID)
			{
				if (get UNIT_XZ(u)!=0)//check if it actually exist (that was for TA, I haven't tested but hope that in Spring too the pos of unexisting units is reset)
				{
					if(get UNIT_ALLIED(u) == 1)
					{
						if(get XZ_HYPOT(get PIECE_XZ(0) - get UNIT_XZ(u))<(BODY_RADIUS))
						{
							if(get UNIT_HEIGHT (u) == HEAD)
							{
							attach-unit u to head_a;
							}
							if(get UNIT_HEIGHT (u) == TORSO)
							{
							attach-unit u to torso_a;
							}
							if(get UNIT_HEIGHT (u) == RUPARM)
							{
							attach-unit u to ruparm_a;
							}
							if(get UNIT_HEIGHT (u) == RLOARM)
							{
							attach-unit u to rloarm_a;
							}
							if(get UNIT_HEIGHT (u) == LUPARM)
							{
							attach-unit u to luparm_a;
							}
							if(get UNIT_HEIGHT (u) == LLOARM)
							{
							attach-unit u to lloarm_a;
							}
							if(get UNIT_HEIGHT (u) == RTHIGH)
							{
							attach-unit u to rthigh_a;
							}
							if(get UNIT_HEIGHT (u) == RLEG)
							{
							attach-unit u to rleg_a;
							}
							if(get UNIT_HEIGHT (u) == LTHIGH)
							{
							attach-unit u to lthigh_a;
							}			
							if(get UNIT_HEIGHT (u) == LLEG)
							{
							attach-unit u to lleg_a;
							}											
						}
					}
				}
			}
		}
}


Create()
{
	bMoving = 0;
	bAiming = 0;
	iState = 1;
	iFear = 0;
	iSpeed = GET MAX_SPEED;
	start-script WeaponReady();
	start-script RunControl();
	sleep 64;
	call-script Assemble();
}

RestoreAfterDelay()
{
	sleep RestoreDelay;
//	bAiming=0;	
	if (iFear > 0) start-script CrawlControl();
	if (iFear <= 0)
		{
		start-script RunControl();
		}
}


#include "inf_Death.h"