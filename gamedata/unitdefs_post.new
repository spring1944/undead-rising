--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

local modOptions
if (Spring.GetModOptions) then
  modOptions = Spring.GetModOptions()
end


--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

local function disableunits(unitlist)
	for name, ud in pairs(UnitDefs) do
	    if (ud.buildoptions) then
	      for _, toremovename in ipairs(unitlist) do
	        for index, unitname in pairs(ud.buildoptions) do
	          if (unitname == toremovename) then
	            table.remove(ud.buildoptions, index)
	          end
	        end
	      end
	    end
	end
end

local function tobool(val)
  local t = type(val)
  if (t == 'nil') then
    return false
  elseif (t == 'boolean') then
    return val
  elseif (t == 'number') then
    return (val ~= 0)
  elseif (t == 'string') then
    return ((val ~= '0') and (val ~= 'false'))
  end
  return false
end

if (modOptions and (modOptions.gametype == "1")) then
  -- remove all build options
  Game = { gameSpeed = 30 };  --  required by tactics.lua
  local options = VFS.Include("LuaRules/Configs/tactics.lua")
  local customBuilds = options.customBuilds
  for name, ud in pairs(UnitDefs) do
    if tobool(ud.commander) then
      ud.buildoptions = (customBuilds[name] or {}).allow or {}
    else
      ud.buildoptions = {}
    end
  end
end

	--[[if (modOptions and modOptions.unit_los_mult) then
		for name, ud in pairs(UnitDefs) do
			if (ud.sightdistance) then
			ud.sightdistance = (modOptions.unit_los_mult * ud.sightdistance)
			end
		end
	end]]--

	if (modOptions and modOptions.maxammo_mult) then
		for name, ud in pairs(UnitDefs) do
			if (ud.customparams) then
				if (ud.customparams.maxammo) and (ud.weapons) then
				ud.customparams.maxammo = (modOptions.maxammo_mult * ud.customparams.maxammo)
				end
			end
		end
	end

	--[[	for name, ud in pairs(UnitDefs) do
			if (ud.customparams) then
				if (ud.customparams.weaponcost) then
				ud.customparams.weaponcost = (2 * ud.customparams.weaponcost)
				end
			end
		end]]--

	if (modOptions and modOptions.logistics_mult) then
		for name, ud in pairs(UnitDefs) do
			if (ud.customparams) then
				if (ud.customparams.arrivalgap) then
					if (modOptions.logistics_mult == '0') then
					ud.customparams.arrivalgap = (1.5 * ud.customparams.arrivalgap)
					end
					if (modOptions.logistics_mult == '1') then
					ud.customparams.arrivalgap = (1 * ud.customparams.arrivalgap)
					end
					if (modOptions.logistics_mult == '2') then
					ud.customparams.arrivalgap = (0.5 * ud.customparams.arrivalgap)
					end
				end
			end
		end
	end

	--[[if (modOptions and modOptions.unit_speed_mult) then
		for name, ud in pairs(UnitDefs) do
			if (ud.maxvelocity) then
			ud.maxvelocity = (modOptions.unit_speed_mult * ud.maxvelocity)
			ud.acceleration = (modOptions.unit_speed_mult * ud.acceleration)
			end
		end
	end]]--

	if (modOptions and modOptions.command_mult) then
		for name, ud in pairs(UnitDefs) do
			if (ud.extractsmetal) then
				if (modOptions.command_mult == '0') then --Very Low Command
				ud.extractsmetal = (0.25 * ud.extractsmetal)
				end
				if (modOptions.command_mult == '1') then --Low Command
				ud.extractsmetal = (0.5 * ud.extractsmetal)
				end
				if (modOptions.command_mult == '2') then --Normal Command
				ud.extractsmetal = (1 * ud.extractsmetal)
				end
				if (modOptions.command_mult == '3') then --High Command
				ud.extractsmetal = (1.5 * ud.extractsmetal)
				end
				if (modOptions.command_mult == '4') then --Very High Command
				ud.extractsmetal = (2.5 * ud.extractsmetal)
				end
			end
		end
	end

	--[[if (modOptions and modOptions.unit_metal_mult) then
		for name, ud in pairs(UnitDefs) do
			if (ud.extractsmetal) then
			ud.extractsmetal = (modOptions.unit_metal_mult * ud.extractsmetal)
			end
		end
	end]]--

	if (modOptions and modOptions.command_storage and (tonumber(modOptions.command_storage) > 0)) then
		for name, ud in pairs(UnitDefs) do
			if (ud.metalstorage) then
				ud.metalstorage = 0
			end
		end
	end

--[[
	if (modOptions and (modOptions.unit_buildable_airfields == 0)) then
		disableunits({usairfield", "gbrairfield", "gerairfield", "RUSAirfield"})
	end

	if (modOptions and (modOptions.unit_hq_platoon == 1)) then
		disableunits({"us_platoon_hq", "us_platoon_rifle", "us_platoon_assault", "gbr_platoon_hq", "gbr_platoon_rifle", "gbr_platoon_assault", "ger_platoon_hq", "ger_platoon_rifle", "ger_platoon_assault", "rus_platoon_rifle", "rus_platoon_assault"})
	end

	if (modOptions and (modOptions.unit_hq_platoon == 0)) then
		disableunits({"us_platoon_hq_rifle", "us_platoon_hq_assault", "gbr_platoon_hq_rifle", "gbr_platoon_hq_assault", "ger_platoon_hq_rifle", "ger_platoon_hq_assault", "rus_platoon_big_rifle", "rus_platoon_big_assault"})
	end


if (modOptions and (unit_buildable_airfields == 1)) then
	        for name, ud in pairs(UnitDefs) do
	            local unitname = ud.unitname
	                if unitname == "USgmcengvehicle" then
	                    table.insert(ud.buildoptions, 1, "usairfield")
	                end
					if unitname == "rusk31" then
	                    table.insert(ud.buildoptions, 1, "rusairfield")
	                end
					if unitname == "gersdkfz9" then
	                    table.insert(ud.buildoptions, 1, "gerairfield")
	                end
					if unitname == "GBRMatadorEngVehicle" then
	                    table.insert(ud.buildoptions, 1, "GBRAirfield")
	                end
            end
end]]--

-- adjust descriptions
for name, ud in pairs(UnitDefs) do
	-- ammo storage
	if (ud.energystorage) then
		-- this is to exclude things like builders having 0.01 storage
		if tonumber(ud.energystorage)>1 then
			if not (ud.description) then
				ud.description = "log. storage: "..ud.energystorage
			end
			ud.description = ud.description.." (log. storage: "..ud.energystorage..")"
		end
	end
	-- ammo users
	if (ud.customparams) then
		if (ud.customparams.weaponcost) and (ud.customparams.maxammo) then
			if not (ud.description) then
				ud.description = "log. for full reload: "..(ud.customparams.weaponcost*ud.customparams.maxammo)
			end
			ud.description = ud.description.." (log. for full reload: "..(ud.customparams.weaponcost*ud.customparams.maxammo)..")"
			
		end
	end
end

-- copy capturable units to all of the sides, change soundset to match
local tmpUnits={}
local tmpUnitCount=0

function deepcopy(object)
    local lookup_table = {}
    local function _copy(object)
        if type(object) ~= "table" then
            return object
        elseif lookup_table[object] then
            return lookup_table[object]
        end
        local new_table = {}
        lookup_table[object] = new_table
        for index, value in pairs(object) do
            new_table[_copy(index)] = _copy(value)
        end
        return setmetatable(new_table, getmetatable(object))
    end
    return _copy(object)
end

function tprint (t, indent, done)
	done = done or {}
	indent = indent or 0
	for key, value in pairs (t) do
		Spring.Echo (string.rep (" ", indent)) -- indent it
		if type (value) == "table" and not done [value] then
			done [value] = true
			Spring.Echo (tostring (key)..":");
			tprint (value, indent + 2, done)
		else
			Spring.Echo (tostring (key).."="..value)
		end
	end
end

for name, ud in pairs(UnitDefs) do
	if (ud.customparams) then
		if ud.customparams.capturable == "1" then
			local tmpUnit={}
			local otherSides={"gbr", "ger", "rus", "us"}
			local tmpUnitSide="", tmpSideLen
			local COBFileName
			-- find out which side that unit is on
			tmpUnitSide=string.sub(ud.unitname, 1, 3)
			tmpSideLen=string.len(tmpUnitSide)
			if tmpUnitSide == "gbr" then
				otherSides[1]=nil
			end
			if tmpUnitSide == "ger" then
				otherSides[2]=nil
			end
			if tmpUnitSide == "rus" then
				otherSides[3]=nil
			end
			-- USA is a special case, only 2 characters in name
			if string.sub(tmpUnitSide, 1, 2) == "us" then
				otherSides[4]=nil
				tmpUnitSide="us"
			end
			-- find and store unit's COB file name
			if (ud.script) then
				COBFileName = ud.script
			else
				COBFileName = name..".cob"
			end
			-- now make 3 copies and apply changes to each
			for _,newSide in pairs(otherSides) do
				-- make a copy
				tmpUnit = deepcopy(ud)
				-- set COBFileName
				if (tmpUnit.script) then
				else
					tmpUnit["script"]=COBFileName
				end
				-- now replace the part in name
				local unitName, oldNameLen
				unitName = ud.unitname
				oldNameLen = string.len(unitName)
				unitName = string.sub(unitName, tmpSideLen+1, oldNameLen)
				unitName = newSide..unitName
				tmpUnit.unitname = unitName
				tmpUnit.side = string.upper(newSide)
				-- process sound names
				for k1,sound in pairs(tmpUnit.sounds) do
					if type(sound) == "table" then
						for k2, soundFileName in ipairs(sound) do
							if string.sub(soundFileName, 1, tmpSideLen) == tmpUnitSide then
								soundFileName = newSide..string.sub(soundFileName, tmpSideLen+1, string.len(soundFileName))
								sound[k2] = soundFileName
							end
						end
					else
						sound = newSide..string.sub(sound, tmpSideLen+1, string.len(sound))
						tmpUnit.sounds[k1] = sound
					end
				end
				tmpUnitCount = tmpUnitCount+1
				tmpUnits[unitName]=tmpUnit
			end

		end
	end
end

if tmpUnitCount>0 then
	tprint(tmpUnits)
	-- append new units to UnitDefs
	for name,ud in pairs(tmpUnits) do
		UnitDefs[name]=ud
	end
end